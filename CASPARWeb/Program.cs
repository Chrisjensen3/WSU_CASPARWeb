using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.SqlServer.Server;
using DataAccess;
using Infrastructure.Models;
using Utility;
using Microsoft.AspNetCore.Authentication.Cookies;

var builder = WebApplication.CreateBuilder(args);

//Authorization Policies
builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("ReqAdminRole",
         policy => policy.RequireRole(SD.ADMIN_ROLE));

    options.AddPolicy("ReqInstructorRole",
         policy => policy.RequireRole(SD.INSTRUCTOR_ROLE));

    options.AddPolicy("ReqStudentRole",
         policy => policy.RequireRole(SD.STUDENT_ROLE));
    
    options.AddPolicy("ReqProgramCoordinatorROle",
         policy => policy.RequireRole(SD.PROGRAM_COORDINATOR_ROLE));
});

// Add services to the container.
builder.Services.AddRazorPages(options =>
{
    //These use the policies above to lockdown the areas
    options.Conventions.AuthorizeAreaFolder("Admin", "/", "ReqAdminRole");
    options.Conventions.AuthorizeAreaFolder("Instr", "/", "ReqInstructorRole");
    options.Conventions.AuthorizeAreaFolder("Stud", "/", "ReqStudentRole");
});

//Allows ajax to use Post Handlers
builder.Services.AddAntiforgery(o => o.HeaderName = "XSRF-TOKEN");

builder.Services.AddDbContext<ApplicationDbContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

//These were generated by the Individual Accounts option
builder.Services.AddDatabaseDeveloperPageExceptionFilter();

builder.Services.AddIdentity<ApplicationUser, IdentityRole>().AddDefaultTokenProviders()
	.AddEntityFrameworkStores<ApplicationDbContext>();

//This defines where to redirect a user when a user can't access a page
builder.Services.ConfigureApplicationCookie(options =>
{
    options.LoginPath = $"/Identity/Account/Login";
    options.AccessDeniedPath = $"/Identity/Account/AccessDenied";
});

builder.Services.AddScoped<UnitOfWork>();
builder.Services.AddScoped<DbInitializer>();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseMigrationsEndPoint(); //also automatically generated
}
else
{
    app.UseExceptionHandler("/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

SeedDatabase();

app.UseAuthorization();

app.MapRazorPages();
app.MapControllerRoute(
	name: "default",
	pattern: "{area=Customer}/{controller=Home}/{action=Index}/{id?}"
);

app.Run();

void SeedDatabase()
{
	using var scope = app.Services.CreateScope();
	var dbInitializer = scope.ServiceProvider.GetRequiredService<DbInitializer>();
	dbInitializer.Initialize();
}