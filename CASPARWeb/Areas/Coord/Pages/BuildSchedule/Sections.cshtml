@page
@model CASPARWeb.Areas.Coord.Pages.BuildSchedule.SectionsModel
@{
}
<div class="container">
    <div class="row pt=4">
        <!--Start Row-->
        <div class="col-6">
            <!--50% of row-->
            <h2 class="text-primary">
                Course Sections for @Model.objSemesterInstance.SemesterInstanceName
            </h2>
        </div><!-- End 1st Column-->
        <div class="col-6 text-end">
            <!--50% row right justified-->
            <a asp-page="Index" class="btn btn-primary mx-2">
                 Back to Semester List
            </a>
            <a asp-page="Upsert" asp-route-semesterInstanceId="@(Model.objSemesterInstance.Id)" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Add Course Section
            </a>
        </div> <!--End 2nd Column-->
    </div> <!--End Row-->
    
    <div class="container mt-3">
        @{
            foreach(var item in Model.courseSectionDictionary)
            {
                <div class="big-dropdown text-primary mb-3" onclick="changeCaret('sectionDropdown@(item.Key)')" data-bs-toggle="collapse" data-bs-target="#multiCollapseCourse@(item.Key)" aria-expanded="false" aria-controls="multiCollapseCourse@(item.Key)">
                    <span><i class="bi bi-caret-right mx-2" id="sectionDropdown@(item.Key)"></i>@item.Value.First().Course.AcademicProgram.ProgramCode @item.Value.First().Course.CourseNumber @item.Value.First().Course.CourseTitle</span>
                    <span class="badge rounded-pill section-count">
                        @item.Value.Count() Sections

                        @{
                            int notStartedCount = 0;
                            foreach (var courseSection in item.Value)
                            {
                                if (courseSection.SectionStatus == null || courseSection.SectionStatus.SectionStatusName == "Not Started")
                                {
                                    notStartedCount++;
                                }
                            }

                            if(notStartedCount > 0)
                            {
                                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" data-bs-toggle="tooltip" data-bs-placement="right" title="Sections Not Started">
                                    @notStartedCount
                                    <span class="visually-hidden">sections not started</span>
                                </span>
                            }
                        }
                    </span>
                </div>

                <div class="dropdown-content collapse multi-collapse container mb-4" id="multiCollapseCourse@(item.Key)">
                @{
                    int itemCount = 1;
                    foreach (var courseSection in item.Value)
                    {
                        <div class="row no-gutters dropdown-row py-1">
                            <div class="col-2">
                                    @{
                                        if (courseSection.SectionStatus != null && courseSection.SectionStatus.SectionStatusColor != null)
                                        {
                                            //This is to determine if the incoming color needs dark or light text inside of the pill badge
                                            string color = courseSection.SectionStatus.SectionStatusColor.Substring(1, 6);
                                            int red = int.Parse(color.Substring(0, 2), System.Globalization.NumberStyles.HexNumber);
                                            int green = int.Parse(color.Substring(2, 2), System.Globalization.NumberStyles.HexNumber);
                                            int blue = int.Parse(color.Substring(4, 2), System.Globalization.NumberStyles.HexNumber);

                                            double[] uic = { (double)red / (double)255, (double)green / (double)255, (double)blue / (double)255 };
                                            List<double> c = new List<double>();
                                            for (int i = 0; i < uic.Length; i++)
                                            {
                                                if (uic[i] <= 0.03928)
                                                {
                                                    c.Add(uic[i] / 12.92);
                                                }
                                                else
                                                {
                                                    c.Add(Math.Pow((uic[i] + 0.055) / 1.055, 2.4));
                                                }
                                            }

                                            var l = (0.2126 * c[0]) + (0.7152 * c[1]) + (0.0722 * c[2]);

                                            string cssClass = (l > 0.179) ? "text-dark" : "text-light";

                                            //This one below can be used if the more advanced version above is not working
                                            //string cssClass = (((red * 0.299) + (green * 0.587) + (blue * 0.114)) > 186) ? "text-dark" : "text-light";
                                            
                                        <span style="position:relative"><span class="badge rounded-pill status-badge @cssClass" style="background-color:@(courseSection.SectionStatus.SectionStatusColor);">@courseSection.SectionStatus.SectionStatusName</span></span>

                                        @*<span style="position:relative"><i class="bi bi-circle-fill" style="color:@courseSection.SectionStatus.SectionStatusColor;position:absolute;left:-20px;"></i></span>*@
                                        @*@courseSection.SectionStatus.SectionStatusName*@
                                        <br />
                                    }
                                    else
                                    {
                                        <span style="position:relative"><span class="badge rounded-pill status-badge" style="background-color:#b90e0a">Not Started</span></span>
                                        <br />
                                    }
                                }
                                <strong>@(courseSection.Course != null ? courseSection.Course.AcademicProgram != null ? courseSection.Course.AcademicProgram.ProgramCode : "Academic Program Not Found" : "Course Not Found") @(courseSection.Course != null ? courseSection.Course.CourseNumber : "Course Number Not Found")</strong>
                                <br>
                                    <strong>Instructor:</strong> @(courseSection.ApplicationUser != null ? @courseSection.ApplicationUser.FullName : Html.Raw("<span class='noval'>None</span>"))
                            </div>
                            <div class="col-9">

                                <div class="row no-gutters">
                                    <div class="col">
                                            <strong>Modality:</strong> @(courseSection.Modality != null ? @courseSection.Modality.ModalityName : Html.Raw("<span class='noval'>None</span>"))
                                    </div>
                                    <div class="col">
                                            <strong>Pay Model:</strong> @(courseSection.PayModel != null ? @courseSection.PayModel.PayModelTitle : Html.Raw("<span class='noval'>None</span>"))
                                    </div>
                                    <div class="col">
                                            <strong>Pay Org:</strong> @(courseSection.PayOrganization != null ? @courseSection.PayOrganization.PayOrganizationTitle : Html.Raw("<span class='noval'>None</span>"))
                                    </div>
                                </div>
                                <div class="row no-gutters">
                                    <div class="col">
                                        <strong>Part of Term:</strong> @(courseSection.PartOfTerm != null ? @courseSection.PartOfTerm.PartOfTermTitle : "None")
                                    </div>
                                    <div class="col">
                                        <strong>Days:</strong> @(courseSection.DaysOfWeek != null ? @courseSection.DaysOfWeek.DaysOfWeekValue : "None")
                                    </div>
                                    <div class="col">
                                        <strong>Time Block:</strong> @(courseSection.TimeBlock != null ? @courseSection.TimeBlock.TimeBlockValue : "None")
                                    </div>
                                </div>
                                <div class="row no-gutters">
                                    <div class="col">
                                        <strong>Campus:</strong> @(courseSection.Classroom != null ? @courseSection.Classroom.Building != null ? courseSection.Classroom.Building.Campus != null ? courseSection.Classroom.Building.Campus.CampusName : "None" : "None" : "None")
                                    </div>
                                    <div class="col">
                                        <strong>Building:</strong> @(courseSection.Classroom != null ? @courseSection.Classroom.Building != null ? courseSection.Classroom.Building.BuildingName : "None" : "None")
                                    </div>
                                    <div class="col">
                                        <strong>Classroom:</strong> @(courseSection.Classroom != null ? @courseSection.Classroom.ClassroomNumber : "None")
                                    </div>
                                </div>

                            </div>
                            <div class="col-1">
                                <a asp-page="Upsert" asp-route-semesterInstanceId="@(Model.objSemesterInstance.Id)" asp-route-courseSectionId="@(courseSection.Id)" class="btn btn-outline-primary mt-1 rounded position-relative" style="cursor:pointer; style="cursor:pointer; width: 100px;">
                                    <i class="bi bi-pencil-square"></i> Edit
                                </a>
                            </div>
                        </div>

                        if(item.Value.Count() > itemCount) 
                        {
                            <hr class="solid">
                        }
                        itemCount++;
                    }
                }
                </div>
            }
        }

    </div>
</div> <!--Close Container-->

@section Scripts {
    <script>
        function changeCaret(elemId) {
            $("#" + elemId).toggleClass("bi-caret-right");
            $("#" + elemId).toggleClass("bi-caret-down-fill");
        }

        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })
    </script>
}

<style>
    .big-dropdown {
        width: 100%;
        height: 150px;
        font-size: 2em;
        border-radius: 10px;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
        line-height: 150px;
        cursor:pointer;
    }

    .dropdown-content {
        width: 95%;
        border-radius: 5px;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
    }

    .dropdown-row {
        width: 100%;
        margin: auto;
    }

    hr.solid {
        margin-top:0px;
        margin-bottom:0px;
    }

    .status-badge {
        position: absolute;
        left: -10px
    }

    .section-count {
        float: right;
        color: #593196;
        border: 1px solid;
        font-size: large;
        position: relative;
        top: 58px;
        right: 20px;
        font-weight: lighter;
    }

    .noval {
        color: #DC3545;
    }
</style>